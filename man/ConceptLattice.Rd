% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concept_lattice.R
\name{ConceptLattice}
\alias{ConceptLattice}
\title{R6 class for a context lattice}
\description{
This class implements the data structure and methods for concept lattices.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ConceptLattice$new()}}
\item \href{#method-size}{\code{ConceptLattice$size()}}
\item \href{#method-is_empty}{\code{ConceptLattice$is_empty()}}
\item \href{#method-get_extents}{\code{ConceptLattice$get_extents()}}
\item \href{#method-get_intents}{\code{ConceptLattice$get_intents()}}
\item \href{#method-plot}{\code{ConceptLattice$plot()}}
\item \href{#method-print}{\code{ConceptLattice$print()}}
\item \href{#method-to_latex}{\code{ConceptLattice$to_latex()}}
\item \href{#method-get_concepts_by_id}{\code{ConceptLattice$get_concepts_by_id()}}
\item \href{#method-get_sublattice}{\code{ConceptLattice$get_sublattice()}}
\item \href{#method-join_irreducibles}{\code{ConceptLattice$join_irreducibles()}}
\item \href{#method-meet_irreducibles}{\code{ConceptLattice$meet_irreducibles()}}
\item \href{#method-supremum}{\code{ConceptLattice$supremum()}}
\item \href{#method-infimum}{\code{ConceptLattice$infimum()}}
\item \href{#method-get_subconcepts}{\code{ConceptLattice$get_subconcepts()}}
\item \href{#method-get_superconcepts}{\code{ConceptLattice$get_superconcepts()}}
\item \href{#method-compute_support}{\code{ConceptLattice$compute_support()}}
\item \href{#method-clone}{\code{ConceptLattice$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new \code{ConceptLattice} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$new(extents, intents, objects, attributes, I = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{extents}}{(\code{dgCMatrix}) The extents of all concepts}

\item{\code{intents}}{(\code{dgCMatrix}) The intents of all concepts}

\item{\code{objects}}{(character vector) Names of the objects in the formal context}

\item{\code{attributes}}{(character vector) Names of the attributes in the formal context}

\item{\code{I}}{(\code{dgCMatrix}) The matrix of the formal context}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{ConceptLattice} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-size"></a>}}
\subsection{Method \code{size()}}{
Size of the Lattice
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$size()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The number of concepts in the lattice.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_empty"></a>}}
\subsection{Method \code{is_empty()}}{
Is the lattice empty?
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$is_empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if the lattice has no concepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_extents"></a>}}
\subsection{Method \code{get_extents()}}{
Concept Extents
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_extents()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The extents of all concepts, as a \code{dgCMatrix}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_intents"></a>}}
\subsection{Method \code{get_intents()}}{
Concept Intents
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_intents()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The intents of all concepts, as a \code{dgCMatrix}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\subsection{Method \code{plot()}}{
Plot the concept lattice
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$plot(object_names = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_names}}{(logical) If \code{TRUE}, plot object names, otherwise omit them from the diagram.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, just plots the graph of the concept lattice.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
Print the Concept Lattice
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing, just prints the lattice.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_latex"></a>}}
\subsection{Method \code{to_latex()}}{
Write in LaTeX
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$to_latex(ncols = 1, numbered = TRUE, align = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ncols}}{(integer) Number of columns of the output.}

\item{\code{numbered}}{(logical) Number the concepts?}

\item{\code{align}}{(logical) Align objects and attributes independently?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The \code{LaTeX} code to list all concepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_concepts_by_id"></a>}}
\subsection{Method \code{get_concepts_by_id()}}{
Get Concepts by Index
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_concepts_by_id(indices)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indices}}{(numeric vector) The indices of the concepts to return as a list of SparseConcepts.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of SparseConcepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_sublattice"></a>}}
\subsection{Method \code{get_sublattice()}}{
Sublattice
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_sublattice(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{See Details.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
As argument, one can provide both integer indices or \code{SparseConcepts}, separated by commas. The corresponding concepts are used to generate a sublattice.
}

\subsection{Returns}{
The generated sublattice as a new \code{ConceptLattice} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-join_irreducibles"></a>}}
\subsection{Method \code{join_irreducibles()}}{
Join-irreducible Elements
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$join_irreducibles()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The join-irreducible elements in the concept lattice.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-meet_irreducibles"></a>}}
\subsection{Method \code{meet_irreducibles()}}{
Meet-irreducible Elements
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$meet_irreducibles()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The meet-irreducible elements in the concept lattice.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-supremum"></a>}}
\subsection{Method \code{supremum()}}{
Supremum of Concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$supremum(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{See Details.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
As argument, one can provide both integer indices or \code{SparseConcepts}, separated by commas. The corresponding concepts are used to compute their supremum in the lattice.
}

\subsection{Returns}{
The supremum of the list of concepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-infimum"></a>}}
\subsection{Method \code{infimum()}}{
Infimum of Concepts
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$infimum(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{See Details.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
As argument, one can provide both integer indices or \code{SparseConcepts}, separated by commas. The corresponding concepts are used to compute their infimum in the lattice.
}

\subsection{Returns}{
The infimum of the list of concepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_subconcepts"></a>}}
\subsection{Method \code{get_subconcepts()}}{
Subconcepts of a Concept
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_subconcepts(C)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{C}}{(numeric or \code{SparseConcept}) The concept to which determine all its subconcepts.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with the subconcepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_superconcepts"></a>}}
\subsection{Method \code{get_superconcepts()}}{
Superconcepts of a Concept
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$get_superconcepts(C)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{C}}{(numeric or \code{SparseConcept}) The concept to which determine all its superconcepts.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list with the superconcepts.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-compute_support"></a>}}
\subsection{Method \code{compute_support()}}{
Get support of each concept
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$compute_support()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A vector with the support of each concept.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ConceptLattice$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
