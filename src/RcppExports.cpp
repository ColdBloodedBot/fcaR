// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// printImplicationTree
void printImplicationTree(SEXP ext);
RcppExport SEXP _fcaR_printImplicationTree(SEXP extSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    printImplicationTree(ext);
    return R_NilValue;
END_RCPP
}
// createImplicationTree
SEXP createImplicationTree(int n_attributes);
RcppExport SEXP _fcaR_createImplicationTree(SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(createImplicationTree(n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// addImplicationToTree_XPtr
void addImplicationToTree_XPtr(SEXP ext, S4 A);
RcppExport SEXP _fcaR_addImplicationToTree_XPtr(SEXP extSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    addImplicationToTree_XPtr(ext, A);
    return R_NilValue;
END_RCPP
}
// ganters_algorithm_implications_tree_final
List ganters_algorithm_implications_tree_final(NumericMatrix I, List grades_set, StringVector attrs, bool verbose);
RcppExport SEXP _fcaR_ganters_algorithm_implications_tree_final(SEXP ISEXP, SEXP grades_setSEXP, SEXP attrsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< StringVector >::type attrs(attrsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications_tree_final(I, grades_set, attrs, verbose));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_colwise
NumericVector apply_F_colwise(NumericMatrix x, CharacterVector type, double init_value);
RcppExport SEXP _fcaR_apply_F_colwise(SEXP xSEXP, SEXP typeSEXP, SEXP init_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type init_value(init_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_colwise(x, type, init_value));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_rowwise
NumericVector apply_F_rowwise(NumericMatrix x, CharacterVector type, double init_value);
RcppExport SEXP _fcaR_apply_F_rowwise(SEXP xSEXP, SEXP typeSEXP, SEXP init_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type init_value(init_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_rowwise(x, type, init_value));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_rowwise_xy
NumericMatrix apply_F_rowwise_xy(NumericMatrix x, NumericVector y, CharacterVector type);
RcppExport SEXP _fcaR_apply_F_rowwise_xy(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_rowwise_xy(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_elementwise
NumericMatrix apply_F_elementwise(NumericMatrix x, NumericMatrix y, CharacterVector type);
RcppExport SEXP _fcaR_apply_F_elementwise(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_elementwise(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// self_intersection_C
IntegerVector self_intersection_C(IntegerVector x_i, IntegerVector x_p, IntegerVector y_i, IntegerVector y_p);
RcppExport SEXP _fcaR_self_intersection_C(SEXP x_iSEXP, SEXP x_pSEXP, SEXP y_iSEXP, SEXP y_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_p(y_pSEXP);
    rcpp_result_gen = Rcpp::wrap(self_intersection_C(x_i, x_p, y_i, y_p));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_C
SEXP is_subset_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP X, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP Y, SEXP PROPER, SEXP OUT_P);
RcppExport SEXP _fcaR_is_subset_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP XSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP YSEXP, SEXP PROPERSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type PROPER(PROPERSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_C(X_P, X_I, X_DIM, X, Y_P, Y_I, Y_DIM, Y, PROPER, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// intersects_C
SEXP intersects_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP OUT_P);
RcppExport SEXP _fcaR_intersects_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(intersects_C(X_P, X_I, X_DIM, Y_P, Y_I, Y_DIM, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// is_equal_set_C
SEXP is_equal_set_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP X, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP Y, SEXP PROPER, SEXP OUT_P);
RcppExport SEXP _fcaR_is_equal_set_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP XSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP YSEXP, SEXP PROPERSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type PROPER(PROPERSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(is_equal_set_C(X_P, X_I, X_DIM, X, Y_P, Y_I, Y_DIM, Y, PROPER, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// which_at_col_C
IntegerVector which_at_col_C(IntegerVector x_i, IntegerVector x_p, int col);
RcppExport SEXP _fcaR_which_at_col_C(SEXP x_iSEXP, SEXP x_pSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(which_at_col_C(x_i, x_p, col));
    return rcpp_result_gen;
END_RCPP
}
// flatten_sparse_C
NumericVector flatten_sparse_C(IntegerVector p, IntegerVector i, NumericVector x, NumericVector dims);
RcppExport SEXP _fcaR_flatten_sparse_C(SEXP pSEXP, SEXP iSEXP, SEXP xSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(flatten_sparse_C(p, i, x, dims));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fcaR_printImplicationTree", (DL_FUNC) &_fcaR_printImplicationTree, 1},
    {"_fcaR_createImplicationTree", (DL_FUNC) &_fcaR_createImplicationTree, 1},
    {"_fcaR_addImplicationToTree_XPtr", (DL_FUNC) &_fcaR_addImplicationToTree_XPtr, 2},
    {"_fcaR_ganters_algorithm_implications_tree_final", (DL_FUNC) &_fcaR_ganters_algorithm_implications_tree_final, 4},
    {"_fcaR_apply_F_colwise", (DL_FUNC) &_fcaR_apply_F_colwise, 3},
    {"_fcaR_apply_F_rowwise", (DL_FUNC) &_fcaR_apply_F_rowwise, 3},
    {"_fcaR_apply_F_rowwise_xy", (DL_FUNC) &_fcaR_apply_F_rowwise_xy, 3},
    {"_fcaR_apply_F_elementwise", (DL_FUNC) &_fcaR_apply_F_elementwise, 3},
    {"_fcaR_self_intersection_C", (DL_FUNC) &_fcaR_self_intersection_C, 4},
    {"_fcaR_is_subset_C", (DL_FUNC) &_fcaR_is_subset_C, 10},
    {"_fcaR_intersects_C", (DL_FUNC) &_fcaR_intersects_C, 7},
    {"_fcaR_is_equal_set_C", (DL_FUNC) &_fcaR_is_equal_set_C, 10},
    {"_fcaR_which_at_col_C", (DL_FUNC) &_fcaR_which_at_col_C, 3},
    {"_fcaR_flatten_sparse_C", (DL_FUNC) &_fcaR_flatten_sparse_C, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_fcaR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
