// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// which_at_col_C
IntegerVector which_at_col_C(IntegerVector x_i, IntegerVector x_p, int col);
RcppExport SEXP _fcaR_which_at_col_C(SEXP x_iSEXP, SEXP x_pSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(which_at_col_C(x_i, x_p, col));
    return rcpp_result_gen;
END_RCPP
}
// pre_condition
bool pre_condition(IntegerVector x_i, IntegerVector y_i);
RcppExport SEXP _fcaR_pre_condition(SEXP x_iSEXP, SEXP y_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_i(y_iSEXP);
    rcpp_result_gen = Rcpp::wrap(pre_condition(x_i, y_i));
    return rcpp_result_gen;
END_RCPP
}
// is_pre_condition
bool is_pre_condition(IntegerVector x_i, IntegerVector x_p, IntegerVector y_i, IntegerVector y_p);
RcppExport SEXP _fcaR_is_pre_condition(SEXP x_iSEXP, SEXP x_pSEXP, SEXP y_iSEXP, SEXP y_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_p(y_pSEXP);
    rcpp_result_gen = Rcpp::wrap(is_pre_condition(x_i, x_p, y_i, y_p));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_individual
bool is_subset_individual(IntegerVector x_i, NumericVector x, IntegerVector y_i, NumericVector y, int len);
RcppExport SEXP _fcaR_is_subset_individual(SEXP x_iSEXP, SEXP xSEXP, SEXP y_iSEXP, SEXP ySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_individual(x_i, x, y_i, y, len));
    return rcpp_result_gen;
END_RCPP
}
// compare_elements_first
List compare_elements_first(NumericVector x);
RcppExport SEXP _fcaR_compare_elements_first(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_elements_first(x));
    return rcpp_result_gen;
END_RCPP
}
// compare_elements_other
List compare_elements_other(NumericVector x, IntegerVector idx_i, IntegerVector idx_j);
RcppExport SEXP _fcaR_compare_elements_other(SEXP xSEXP, SEXP idx_iSEXP, SEXP idx_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx_i(idx_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx_j(idx_jSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_elements_other(x, idx_i, idx_j));
    return rcpp_result_gen;
END_RCPP
}
// compare_equality_other
List compare_equality_other(NumericVector x, IntegerVector idx_i, IntegerVector idx_j);
RcppExport SEXP _fcaR_compare_equality_other(SEXP xSEXP, SEXP idx_iSEXP, SEXP idx_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx_i(idx_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idx_j(idx_jSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_equality_other(x, idx_i, idx_j));
    return rcpp_result_gen;
END_RCPP
}
// flatten_sparse_C
NumericVector flatten_sparse_C(IntegerVector p, IntegerVector i, NumericVector x, NumericVector dims);
RcppExport SEXP _fcaR_flatten_sparse_C(SEXP pSEXP, SEXP iSEXP, SEXP xSEXP, SEXP dimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dims(dimsSEXP);
    rcpp_result_gen = Rcpp::wrap(flatten_sparse_C(p, i, x, dims));
    return rcpp_result_gen;
END_RCPP
}
// intent_C
NumericVector intent_C(NumericVector A, NumericMatrix I);
RcppExport SEXP _fcaR_intent_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(intent_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// extent_C
NumericVector extent_C(NumericVector A, NumericMatrix I);
RcppExport SEXP _fcaR_extent_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(extent_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// closure_C
NumericVector closure_C(NumericVector A, NumericMatrix I);
RcppExport SEXP _fcaR_closure_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(closure_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// direct_sum_C
NumericVector direct_sum_C(NumericVector A, int a_i, double grade_i, int imax);
RcppExport SEXP _fcaR_direct_sum_C(SEXP ASEXP, SEXP a_iSEXP, SEXP grade_iSEXP, SEXP imaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type a_i(a_iSEXP);
    Rcpp::traits::input_parameter< double >::type grade_i(grade_iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sum_C(A, a_i, grade_i, imax));
    return rcpp_result_gen;
END_RCPP
}
// is_set_preceding_C
bool is_set_preceding_C(NumericVector B, NumericVector C, int a_i, double grade_i);
RcppExport SEXP _fcaR_is_set_preceding_C(SEXP BSEXP, SEXP CSEXP, SEXP a_iSEXP, SEXP grade_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type a_i(a_iSEXP);
    Rcpp::traits::input_parameter< double >::type grade_i(grade_iSEXP);
    rcpp_result_gen = Rcpp::wrap(is_set_preceding_C(B, C, a_i, grade_i));
    return rcpp_result_gen;
END_RCPP
}
// next_closure_C
NumericVector next_closure_C(NumericVector A, int i, int imax, NumericVector grades_set, NumericMatrix I);
RcppExport SEXP _fcaR_next_closure_C(SEXP ASEXP, SEXP iSEXP, SEXP imaxSEXP, SEXP grades_setSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(next_closure_C(A, i, imax, grades_set, I));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm
List ganters_algorithm(NumericMatrix I, NumericVector grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_one
LogicalVector is_subset_one(NumericVector A, std::list<NumericVector> LHS);
RcppExport SEXP _fcaR_is_subset_one(SEXP ASEXP, SEXP LHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type LHS(LHSSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_one(A, LHS));
    return rcpp_result_gen;
END_RCPP
}
// semantic_closure_C
NumericVector semantic_closure_C(NumericVector A, std::list<NumericVector> LHS, std::list<NumericVector> RHS);
RcppExport SEXP _fcaR_semantic_closure_C(SEXP ASEXP, SEXP LHSSEXP, SEXP RHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type LHS(LHSSEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type RHS(RHSSEXP);
    rcpp_result_gen = Rcpp::wrap(semantic_closure_C(A, LHS, RHS));
    return rcpp_result_gen;
END_RCPP
}
// next_closure_implications_C
NumericVector next_closure_implications_C(NumericVector A, int i, int imax, List grades_set, std::list<NumericVector> LHS, std::list<NumericVector> RHS);
RcppExport SEXP _fcaR_next_closure_implications_C(SEXP ASEXP, SEXP iSEXP, SEXP imaxSEXP, SEXP grades_setSEXP, SEXP LHSSEXP, SEXP RHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type LHS(LHSSEXP);
    Rcpp::traits::input_parameter< std::list<NumericVector> >::type RHS(RHSSEXP);
    rcpp_result_gen = Rcpp::wrap(next_closure_implications_C(A, i, imax, grades_set, LHS, RHS));
    return rcpp_result_gen;
END_RCPP
}
// setdifferenceC
NumericVector setdifferenceC(NumericVector x, NumericVector y);
RcppExport SEXP _fcaR_setdifferenceC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(setdifferenceC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_implications
List ganters_algorithm_implications(NumericMatrix I, List grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm_implications(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// concat_sparse
S4 concat_sparse(S4 A, S4 B);
RcppExport SEXP _fcaR_concat_sparse(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< S4 >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(concat_sparse(A, B));
    return rcpp_result_gen;
END_RCPP
}
// intent_sparse_C
S4 intent_sparse_C(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_intent_sparse_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(intent_sparse_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// extent_sparse_C
S4 extent_sparse_C(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_extent_sparse_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(extent_sparse_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// closure_sparse_C
S4 closure_sparse_C(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_closure_sparse_C(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(closure_sparse_C(A, I));
    return rcpp_result_gen;
END_RCPP
}
// direct_sum_sparse_C
S4 direct_sum_sparse_C(S4 A, int a_i, double grade_i, int imax);
RcppExport SEXP _fcaR_direct_sum_sparse_C(SEXP ASEXP, SEXP a_iSEXP, SEXP grade_iSEXP, SEXP imaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type a_i(a_iSEXP);
    Rcpp::traits::input_parameter< double >::type grade_i(grade_iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sum_sparse_C(A, a_i, grade_i, imax));
    return rcpp_result_gen;
END_RCPP
}
// is_set_preceding_sparse_C
bool is_set_preceding_sparse_C(S4 B, S4 C, int a_i, double grade_i);
RcppExport SEXP _fcaR_is_set_preceding_sparse_C(SEXP BSEXP, SEXP CSEXP, SEXP a_iSEXP, SEXP grade_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type B(BSEXP);
    Rcpp::traits::input_parameter< S4 >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type a_i(a_iSEXP);
    Rcpp::traits::input_parameter< double >::type grade_i(grade_iSEXP);
    rcpp_result_gen = Rcpp::wrap(is_set_preceding_sparse_C(B, C, a_i, grade_i));
    return rcpp_result_gen;
END_RCPP
}
// empty_sparse_C
S4 empty_sparse_C(int n);
RcppExport SEXP _fcaR_empty_sparse_C(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(empty_sparse_C(n));
    return rcpp_result_gen;
END_RCPP
}
// next_closure_sparse_C
S4 next_closure_sparse_C(S4 A, int i, int imax, NumericVector grades_set, NumericMatrix I);
RcppExport SEXP _fcaR_next_closure_sparse_C(SEXP ASEXP, SEXP iSEXP, SEXP imaxSEXP, SEXP grades_setSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(next_closure_sparse_C(A, i, imax, grades_set, I));
    return rcpp_result_gen;
END_RCPP
}
// cardinal_sparse_C
double cardinal_sparse_C(S4 A);
RcppExport SEXP _fcaR_cardinal_sparse_C(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cardinal_sparse_C(A));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_sparse
List ganters_algorithm_sparse(NumericMatrix I, NumericVector grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm_sparse(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_sparse(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_one_sparse_C
LogicalVector is_subset_one_sparse_C(S4 x, S4 y);
RcppExport SEXP _fcaR_is_subset_one_sparse_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< S4 >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_one_sparse_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// extract_col_sparse_C
S4 extract_col_sparse_C(S4 x, int j);
RcppExport SEXP _fcaR_extract_col_sparse_C(SEXP xSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_col_sparse_C(x, j));
    return rcpp_result_gen;
END_RCPP
}
// semantic_closure_sparse_C
S4 semantic_closure_sparse_C(S4 A, S4 LHS, S4 RHS);
RcppExport SEXP _fcaR_semantic_closure_sparse_C(SEXP ASEXP, SEXP LHSSEXP, SEXP RHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< S4 >::type LHS(LHSSEXP);
    Rcpp::traits::input_parameter< S4 >::type RHS(RHSSEXP);
    rcpp_result_gen = Rcpp::wrap(semantic_closure_sparse_C(A, LHS, RHS));
    return rcpp_result_gen;
END_RCPP
}
// next_closure_implications_sparse_C
S4 next_closure_implications_sparse_C(S4 A, int i, int imax, List grades_set, S4 LHS, S4 RHS);
RcppExport SEXP _fcaR_next_closure_implications_sparse_C(SEXP ASEXP, SEXP iSEXP, SEXP imaxSEXP, SEXP grades_setSEXP, SEXP LHSSEXP, SEXP RHSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< S4 >::type LHS(LHSSEXP);
    Rcpp::traits::input_parameter< S4 >::type RHS(RHSSEXP);
    rcpp_result_gen = Rcpp::wrap(next_closure_implications_sparse_C(A, i, imax, grades_set, LHS, RHS));
    return rcpp_result_gen;
END_RCPP
}
// setdifference_sparse_C
S4 setdifference_sparse_C(S4 x, S4 y);
RcppExport SEXP _fcaR_setdifference_sparse_C(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< S4 >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(setdifference_sparse_C(x, y));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_implications_sparse_C
List ganters_algorithm_implications_sparse_C(NumericMatrix I, List grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm_implications_sparse_C(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications_sparse_C(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// self_intersection_C
IntegerVector self_intersection_C(IntegerVector x_i, IntegerVector x_p, IntegerVector y_i, IntegerVector y_p);
RcppExport SEXP _fcaR_self_intersection_C(SEXP x_iSEXP, SEXP x_pSEXP, SEXP y_iSEXP, SEXP y_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_i(x_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x_p(x_pSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y_p(y_pSEXP);
    rcpp_result_gen = Rcpp::wrap(self_intersection_C(x_i, x_p, y_i, y_p));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_C
SEXP is_subset_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP X, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP Y, SEXP PROPER, SEXP OUT_P);
RcppExport SEXP _fcaR_is_subset_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP XSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP YSEXP, SEXP PROPERSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type PROPER(PROPERSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_C(X_P, X_I, X_DIM, X, Y_P, Y_I, Y_DIM, Y, PROPER, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// intersects_C
SEXP intersects_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP OUT_P);
RcppExport SEXP _fcaR_intersects_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(intersects_C(X_P, X_I, X_DIM, Y_P, Y_I, Y_DIM, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// is_equal_set_C
SEXP is_equal_set_C(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP X, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP Y, SEXP PROPER, SEXP OUT_P);
RcppExport SEXP _fcaR_is_equal_set_C(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP XSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP YSEXP, SEXP PROPERSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    Rcpp::traits::input_parameter< SEXP >::type PROPER(PROPERSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(is_equal_set_C(X_P, X_I, X_DIM, X, Y_P, Y_I, Y_DIM, Y, PROPER, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_binary
SEXP is_subset_binary(SEXP X_P, SEXP X_I, SEXP X_DIM, SEXP Y_P, SEXP Y_I, SEXP Y_DIM, SEXP PROPER, SEXP OUT_P);
RcppExport SEXP _fcaR_is_subset_binary(SEXP X_PSEXP, SEXP X_ISEXP, SEXP X_DIMSEXP, SEXP Y_PSEXP, SEXP Y_ISEXP, SEXP Y_DIMSEXP, SEXP PROPERSEXP, SEXP OUT_PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_P(X_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_I(X_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type X_DIM(X_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_P(Y_PSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_I(Y_ISEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y_DIM(Y_DIMSEXP);
    Rcpp::traits::input_parameter< SEXP >::type PROPER(PROPERSEXP);
    Rcpp::traits::input_parameter< SEXP >::type OUT_P(OUT_PSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_binary(X_P, X_I, X_DIM, Y_P, Y_I, Y_DIM, PROPER, OUT_P));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_colwise
NumericVector apply_F_colwise(NumericMatrix x, CharacterVector type, double init_value);
RcppExport SEXP _fcaR_apply_F_colwise(SEXP xSEXP, SEXP typeSEXP, SEXP init_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type init_value(init_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_colwise(x, type, init_value));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_rowwise
NumericVector apply_F_rowwise(NumericMatrix x, CharacterVector type, double init_value);
RcppExport SEXP _fcaR_apply_F_rowwise(SEXP xSEXP, SEXP typeSEXP, SEXP init_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type init_value(init_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_rowwise(x, type, init_value));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_rowwise_xy
NumericMatrix apply_F_rowwise_xy(NumericMatrix x, NumericVector y, CharacterVector type);
RcppExport SEXP _fcaR_apply_F_rowwise_xy(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_rowwise_xy(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// apply_F_elementwise
NumericMatrix apply_F_elementwise(NumericMatrix x, NumericMatrix y, CharacterVector type);
RcppExport SEXP _fcaR_apply_F_elementwise(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_F_elementwise(x, y, type));
    return rcpp_result_gen;
END_RCPP
}
// printImplicationTree
void printImplicationTree(SEXP ext);
RcppExport SEXP _fcaR_printImplicationTree(SEXP extSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    printImplicationTree(ext);
    return R_NilValue;
END_RCPP
}
// createImplicationTree
SEXP createImplicationTree(int n_attributes);
RcppExport SEXP _fcaR_createImplicationTree(SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(createImplicationTree(n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// addImplicationToTree_XPtr
void addImplicationToTree_XPtr(SEXP ext, S4 A);
RcppExport SEXP _fcaR_addImplicationToTree_XPtr(SEXP extSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    addImplicationToTree_XPtr(ext, A);
    return R_NilValue;
END_RCPP
}
// is_subset_tree_XPtr
LogicalVector is_subset_tree_XPtr(SEXP ext, S4 A);
RcppExport SEXP _fcaR_is_subset_tree_XPtr(SEXP extSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_tree_XPtr(ext, A));
    return rcpp_result_gen;
END_RCPP
}
// compute_intent_S4
S4 compute_intent_S4(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_compute_intent_S4(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(compute_intent_S4(A, I));
    return rcpp_result_gen;
END_RCPP
}
// compute_extent_S4
S4 compute_extent_S4(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_compute_extent_S4(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(compute_extent_S4(A, I));
    return rcpp_result_gen;
END_RCPP
}
// compute_closure_S4
S4 compute_closure_S4(S4 A, NumericMatrix I);
RcppExport SEXP _fcaR_compute_closure_S4(SEXP ASEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(compute_closure_S4(A, I));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_tree_C
LogicalVector is_subset_tree_C(ListOf<IntegerVector> LIST, ListOf<NumericVector> DEGREE, IntegerVector COUNT, int n_implications, S4 S);
RcppExport SEXP _fcaR_is_subset_tree_C(SEXP LISTSEXP, SEXP DEGREESEXP, SEXP COUNTSEXP, SEXP n_implicationsSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type LIST(LISTSEXP);
    Rcpp::traits::input_parameter< ListOf<NumericVector> >::type DEGREE(DEGREESEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type COUNT(COUNTSEXP);
    Rcpp::traits::input_parameter< int >::type n_implications(n_implicationsSEXP);
    Rcpp::traits::input_parameter< S4 >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_tree_C(LIST, DEGREE, COUNT, n_implications, S));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_implications_struct
List ganters_algorithm_implications_struct(NumericMatrix I, List grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm_implications_struct(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications_struct(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_implications_tree
List ganters_algorithm_implications_tree(NumericMatrix I, List grades_set, int n_attributes);
RcppExport SEXP _fcaR_ganters_algorithm_implications_tree(SEXP ISEXP, SEXP grades_setSEXP, SEXP n_attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_attributes(n_attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications_tree(I, grades_set, n_attributes));
    return rcpp_result_gen;
END_RCPP
}
// ganters_algorithm_implications_tree_final
List ganters_algorithm_implications_tree_final(NumericMatrix I, List grades_set, StringVector attrs, bool verbose);
RcppExport SEXP _fcaR_ganters_algorithm_implications_tree_final(SEXP ISEXP, SEXP grades_setSEXP, SEXP attrsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< List >::type grades_set(grades_setSEXP);
    Rcpp::traits::input_parameter< StringVector >::type attrs(attrsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ganters_algorithm_implications_tree_final(I, grades_set, attrs, verbose));
    return rcpp_result_gen;
END_RCPP
}
// is_subset_struct
LogicalVector is_subset_struct(List L, S4 S);
RcppExport SEXP _fcaR_is_subset_struct(SEXP LSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< S4 >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subset_struct(L, S));
    return rcpp_result_gen;
END_RCPP
}
// init_is_subset_struct
void init_is_subset_struct(List L, S4 S);
RcppExport SEXP _fcaR_init_is_subset_struct(SEXP LSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    Rcpp::traits::input_parameter< S4 >::type S(SSEXP);
    init_is_subset_struct(L, S);
    return R_NilValue;
END_RCPP
}
// compute_closure_struct_C
S4 compute_closure_struct_C(S4 A, NumericMatrix I, StringVector attributes);
RcppExport SEXP _fcaR_compute_closure_struct_C(SEXP ASEXP, SEXP ISEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type I(ISEXP);
    Rcpp::traits::input_parameter< StringVector >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_closure_struct_C(A, I, attributes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fcaR_which_at_col_C", (DL_FUNC) &_fcaR_which_at_col_C, 3},
    {"_fcaR_pre_condition", (DL_FUNC) &_fcaR_pre_condition, 2},
    {"_fcaR_is_pre_condition", (DL_FUNC) &_fcaR_is_pre_condition, 4},
    {"_fcaR_is_subset_individual", (DL_FUNC) &_fcaR_is_subset_individual, 5},
    {"_fcaR_compare_elements_first", (DL_FUNC) &_fcaR_compare_elements_first, 1},
    {"_fcaR_compare_elements_other", (DL_FUNC) &_fcaR_compare_elements_other, 3},
    {"_fcaR_compare_equality_other", (DL_FUNC) &_fcaR_compare_equality_other, 3},
    {"_fcaR_flatten_sparse_C", (DL_FUNC) &_fcaR_flatten_sparse_C, 4},
    {"_fcaR_intent_C", (DL_FUNC) &_fcaR_intent_C, 2},
    {"_fcaR_extent_C", (DL_FUNC) &_fcaR_extent_C, 2},
    {"_fcaR_closure_C", (DL_FUNC) &_fcaR_closure_C, 2},
    {"_fcaR_direct_sum_C", (DL_FUNC) &_fcaR_direct_sum_C, 4},
    {"_fcaR_is_set_preceding_C", (DL_FUNC) &_fcaR_is_set_preceding_C, 4},
    {"_fcaR_next_closure_C", (DL_FUNC) &_fcaR_next_closure_C, 5},
    {"_fcaR_ganters_algorithm", (DL_FUNC) &_fcaR_ganters_algorithm, 3},
    {"_fcaR_is_subset_one", (DL_FUNC) &_fcaR_is_subset_one, 2},
    {"_fcaR_semantic_closure_C", (DL_FUNC) &_fcaR_semantic_closure_C, 3},
    {"_fcaR_next_closure_implications_C", (DL_FUNC) &_fcaR_next_closure_implications_C, 6},
    {"_fcaR_setdifferenceC", (DL_FUNC) &_fcaR_setdifferenceC, 2},
    {"_fcaR_ganters_algorithm_implications", (DL_FUNC) &_fcaR_ganters_algorithm_implications, 3},
    {"_fcaR_concat_sparse", (DL_FUNC) &_fcaR_concat_sparse, 2},
    {"_fcaR_intent_sparse_C", (DL_FUNC) &_fcaR_intent_sparse_C, 2},
    {"_fcaR_extent_sparse_C", (DL_FUNC) &_fcaR_extent_sparse_C, 2},
    {"_fcaR_closure_sparse_C", (DL_FUNC) &_fcaR_closure_sparse_C, 2},
    {"_fcaR_direct_sum_sparse_C", (DL_FUNC) &_fcaR_direct_sum_sparse_C, 4},
    {"_fcaR_is_set_preceding_sparse_C", (DL_FUNC) &_fcaR_is_set_preceding_sparse_C, 4},
    {"_fcaR_empty_sparse_C", (DL_FUNC) &_fcaR_empty_sparse_C, 1},
    {"_fcaR_next_closure_sparse_C", (DL_FUNC) &_fcaR_next_closure_sparse_C, 5},
    {"_fcaR_cardinal_sparse_C", (DL_FUNC) &_fcaR_cardinal_sparse_C, 1},
    {"_fcaR_ganters_algorithm_sparse", (DL_FUNC) &_fcaR_ganters_algorithm_sparse, 3},
    {"_fcaR_is_subset_one_sparse_C", (DL_FUNC) &_fcaR_is_subset_one_sparse_C, 2},
    {"_fcaR_extract_col_sparse_C", (DL_FUNC) &_fcaR_extract_col_sparse_C, 2},
    {"_fcaR_semantic_closure_sparse_C", (DL_FUNC) &_fcaR_semantic_closure_sparse_C, 3},
    {"_fcaR_next_closure_implications_sparse_C", (DL_FUNC) &_fcaR_next_closure_implications_sparse_C, 6},
    {"_fcaR_setdifference_sparse_C", (DL_FUNC) &_fcaR_setdifference_sparse_C, 2},
    {"_fcaR_ganters_algorithm_implications_sparse_C", (DL_FUNC) &_fcaR_ganters_algorithm_implications_sparse_C, 3},
    {"_fcaR_self_intersection_C", (DL_FUNC) &_fcaR_self_intersection_C, 4},
    {"_fcaR_is_subset_C", (DL_FUNC) &_fcaR_is_subset_C, 10},
    {"_fcaR_intersects_C", (DL_FUNC) &_fcaR_intersects_C, 7},
    {"_fcaR_is_equal_set_C", (DL_FUNC) &_fcaR_is_equal_set_C, 10},
    {"_fcaR_is_subset_binary", (DL_FUNC) &_fcaR_is_subset_binary, 8},
    {"_fcaR_apply_F_colwise", (DL_FUNC) &_fcaR_apply_F_colwise, 3},
    {"_fcaR_apply_F_rowwise", (DL_FUNC) &_fcaR_apply_F_rowwise, 3},
    {"_fcaR_apply_F_rowwise_xy", (DL_FUNC) &_fcaR_apply_F_rowwise_xy, 3},
    {"_fcaR_apply_F_elementwise", (DL_FUNC) &_fcaR_apply_F_elementwise, 3},
    {"_fcaR_printImplicationTree", (DL_FUNC) &_fcaR_printImplicationTree, 1},
    {"_fcaR_createImplicationTree", (DL_FUNC) &_fcaR_createImplicationTree, 1},
    {"_fcaR_addImplicationToTree_XPtr", (DL_FUNC) &_fcaR_addImplicationToTree_XPtr, 2},
    {"_fcaR_is_subset_tree_XPtr", (DL_FUNC) &_fcaR_is_subset_tree_XPtr, 2},
    {"_fcaR_compute_intent_S4", (DL_FUNC) &_fcaR_compute_intent_S4, 2},
    {"_fcaR_compute_extent_S4", (DL_FUNC) &_fcaR_compute_extent_S4, 2},
    {"_fcaR_compute_closure_S4", (DL_FUNC) &_fcaR_compute_closure_S4, 2},
    {"_fcaR_is_subset_tree_C", (DL_FUNC) &_fcaR_is_subset_tree_C, 5},
    {"_fcaR_ganters_algorithm_implications_struct", (DL_FUNC) &_fcaR_ganters_algorithm_implications_struct, 3},
    {"_fcaR_ganters_algorithm_implications_tree", (DL_FUNC) &_fcaR_ganters_algorithm_implications_tree, 3},
    {"_fcaR_ganters_algorithm_implications_tree_final", (DL_FUNC) &_fcaR_ganters_algorithm_implications_tree_final, 4},
    {"_fcaR_is_subset_struct", (DL_FUNC) &_fcaR_is_subset_struct, 2},
    {"_fcaR_init_is_subset_struct", (DL_FUNC) &_fcaR_init_is_subset_struct, 2},
    {"_fcaR_compute_closure_struct_C", (DL_FUNC) &_fcaR_compute_closure_struct_C, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_fcaR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
